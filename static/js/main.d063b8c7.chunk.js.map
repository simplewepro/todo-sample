{"version":3,"sources":["serviceWorker.js","state/utils/createReducer.js","utilities/index.js","state/modules/lists/reducer.js","state/modules/lists/types.js","state/modules/lists/actions.js","state/modules/lists/selectors.js","state/modules/lists/index.js","state/modules/todos/reducer.js","state/modules/todos/types.js","state/modules/todos/selectors.js","state/modules/todos/index.js","state/store.js","views/routes/default.jsx","views/UI/form/InputField.jsx","views/components/AddItem/AddItem.jsx","views/components/Lists/Lists.jsx","views/components/Todos/Todos.jsx","state/modules/todos/actions.js","views/routes/lists.jsx","views/routes/404.jsx","views/components/CreateList/CreateList.jsx","views/routes/create-first-list.jsx","views/routes/index.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","initialState","reducerMap","state","action","reducer","type","uniq","arr","Array","from","Set","listsReducer","createReducer","byId","all","id","name","filter","list","addList","selectAllLists","createSelector","root","lists","ids","map","todosReducer","text","listId","oldList","v4","completed","currentTodo","todoToRemove","todo","getTodosById","todos","getAllTodos","makeTodosSelector","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistConfig","key","storage","rootReducer","combineReducers","reducers","persistedReducer","persistReducer","Default","path","useSelector","length","to","InputField","field","rest","form","meta","Input","AddItem","placeholder","onAdd","initialValues","onSubmit","resetForm","handleSubmit","Form","transparent","autoComplete","component","Lists","history","useHistory","useParams","dispatch","useDispatch","Segment","vertical","Menu","secondary","fluid","Item","active","className","onClick","push","Button","icon","size","Icon","Todos","todosSelector","useMemo","cx","Checkbox","checked","onChange","toggleTodo","label","removeTodo","Header","textAlign","addTodo","ListsPage","params","Sidebar","Pushable","width","visible","animation","Pusher","NotFound","Container","as","CreateList","listName","color","CreateFirstList","Transition","transitionOnMount","duration","inverted","Router","exact","store","createStore","applyMiddleware","thunkMiddleware","persistor","persistStore","configureStore","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d063b8c7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default initialState => reducerMap => (state = initialState, action) => {\n  const reducer = reducerMap[action.type];\n  return reducer ? reducer(state, action) : state;\n};\n","export const uniq = (arr) => Array.from(new Set(arr));\n\nexport const removeProperties = (object, ...keys) =>\n  Object.entries(object).reduce(\n    (prev, [key, value]) => ({\n      ...prev,\n      ...(!keys.includes(key) && { [key]: value }),\n    }),\n    {},\n  );\n","import * as types from './types';\nimport { createReducer } from '../../utils';\nimport { uniq } from '../../../utilities';\n\nconst initialState = {\n  byId: {},\n  all: [],\n};\n\nconst listsReducer = createReducer(initialState)({\n  [types.ADD_LIST]: (state, { id, name }) => {\n    return {\n      ...state,\n      byId: {\n        ...state.byId,\n        [id]: {\n          name,\n        },\n      },\n      all: uniq([...state.all, id]),\n    };\n  },\n\n  [types.REMOVE_LIST]: (state, { id }) => {\n    const { [id]: listToRemove, ...byId } = state.byId;\n\n    return {\n      ...state,\n      byId,\n      all: state.all.filter((list) => list !== id),\n    };\n  },\n});\n\nexport default listsReducer;\n","export const ADD_LIST = 'lists / add';\nexport const EDIT_LIST = 'lists / edit';\nexport const REMOVE_LIST = 'lists / remove';\n","import * as types from './types';\n\nexport const addList = (id, name) => ({\n  type: types.ADD_LIST,\n  id,\n  name,\n});\n\nexport const removeList = (id) => ({\n  type: types.REMOVE_LIST,\n  id,\n});\n","import { createSelector } from 'reselect';\n\nexport const getListsById = (state) => state.root.lists.byId;\n\nexport const getAllLists = (state) => state.root.lists.all;\n\nexport const selectAllLists = createSelector(\n  getListsById,\n  getAllLists,\n  (byId, ids) => ids.map((id) => ({ id, ...byId[id] })),\n);\n","import reducer from './reducer';\n\nexport * from './actions';\nexport * from './selectors';\n\nexport default reducer;\n","import { v4 } from 'uuid';\nimport * as types from './types';\nimport { createReducer } from '../../utils';\nimport { uniq } from '../../../utilities';\n\nconst initialState = {\n  byId: {},\n};\n\nconst todosReducer = createReducer(initialState)({\n  [types.ADD_TODO]: (state, { text, listId }) => {\n    const { [listId]: oldList = [] } = state;\n    const id = v4();\n\n    return {\n      ...state,\n      byId: {\n        ...state.byId,\n        [id]: {\n          text,\n          listId,\n          completed: false,\n        },\n      },\n      [listId]: uniq([...oldList, id]),\n    };\n  },\n\n  [types.TOGGLE_TODO]: (state, { id }) => {\n    const currentTodo = state.byId[id];\n    return {\n      ...state,\n      byId: {\n        ...state.byId,\n        [id]: {\n          ...currentTodo,\n          completed: !currentTodo.completed,\n        },\n      },\n    };\n  },\n\n  [types.REMOVE_TODO]: (state, { id }) => {\n    const { [id]: todoToRemove, ...byId } = state.byId;\n\n    return {\n      ...state,\n      byId,\n      [todoToRemove.listId]: state[todoToRemove.listId].filter(\n        (todo) => todo !== id,\n      ),\n    };\n  },\n});\n\nexport default todosReducer;\n","export const ADD_TODO = 'todos / add';\nexport const EDIT_TODO = 'todos / edit';\nexport const REMOVE_TODO = 'todos / remove';\nexport const TOGGLE_TODO = 'todos / toggle';\n","import { createSelector } from 'reselect';\n\nexport const getTodosById = (state) => state.root.todos.byId;\n\nexport const getAllTodos = (state, listId) => state.root.todos[listId] || [];\n\nexport const makeTodosSelector = () =>\n  createSelector(getTodosById, getAllTodos, (byId, ids) =>\n    ids.map((id) => ({ id, ...byId[id] })),\n  );\n","import reducer from './reducer';\n\nexport * from './actions';\nexport * from './selectors';\n\nexport default reducer;\n","import { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport * as reducers from './modules';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nconst rootReducer = combineReducers({ root: combineReducers(reducers) });\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default () => {\n  const store = createStore(\n    persistedReducer,\n    composeEnhancer(applyMiddleware(thunkMiddleware)),\n  );\n\n  const persistor = persistStore(store);\n\n  return { store, persistor };\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nconst Default = () => {\n  const lists = useSelector((state) => state.root.lists.all);\n\n  let path = '/create-first-list';\n\n  if (lists.length) {\n    path = '/lists';\n  }\n\n  return <Redirect to={path} />;\n};\n\nexport default Default;\n","import React from 'react';\nimport { Input } from 'semantic-ui-react';\n\nexport const InputField = ({ field, form, meta, ...rest }) => {\n  return <Input {...field} {...rest} />;\n};\n","import React from 'react';\nimport { Form } from 'semantic-ui-react';\nimport { Formik, Field } from 'formik';\n\nimport { InputField } from '../../UI/form/InputField';\n\nexport const AddItem = ({ placeholder, onAdd }) => {\n  return (\n    <Formik\n      initialValues={{ text: '' }}\n      onSubmit={({ text }, { resetForm }) => {\n        onAdd(text);\n        resetForm();\n      }}\n    >\n      {({ handleSubmit }) => (\n        <Form onSubmit={handleSubmit}>\n          <Field\n            name=\"text\"\n            placeholder={placeholder}\n            transparent\n            autoComplete=\"off\"\n            component={InputField}\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useParams, useHistory, Redirect } from 'react-router-dom';\nimport { Menu, Button, Icon, Segment } from 'semantic-ui-react';\nimport { v4 } from 'uuid';\n\nimport {\n  selectAllLists,\n  removeList,\n  addList,\n} from '../../../state/modules/lists';\nimport { AddItem } from '../AddItem/AddItem';\n\nimport './Lists.styles.scss';\n\nexport const Lists = () => {\n  const history = useHistory();\n  const { listId } = useParams();\n\n  const dispatch = useDispatch();\n\n  const lists = useSelector(selectAllLists);\n\n  if (!lists.length) return <Redirect to=\"/create-first-list\" />;\n\n  return (\n    <Segment vertical>\n      <Menu secondary vertical fluid>\n        {lists.map((list) => (\n          <Menu.Item\n            key={list.id}\n            active={listId === list.id}\n            className=\"m-list-item f-row f-items-center\"\n            onClick={() => {\n              history.push(`/lists/${list.id}`);\n            }}\n          >\n            <span className=\"flex\">{list.name}</span>\n\n            <Button\n              icon\n              size=\"tiny\"\n              onClick={() => dispatch(removeList(list.id))}\n            >\n              <Icon name=\"trash\" />\n            </Button>\n          </Menu.Item>\n        ))}\n      </Menu>\n\n      <AddItem\n        placeholder=\"Add List...\"\n        onAdd={(name) => dispatch(addList(v4(), name))}\n      />\n    </Segment>\n  );\n};\n","import React, { useMemo } from 'react';\nimport cx from 'classnames';\nimport {\n  Menu,\n  Checkbox,\n  Header,\n  Segment,\n  Button,\n  Icon,\n} from 'semantic-ui-react';\nimport { useParams } from 'react-router';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  makeTodosSelector,\n  addTodo,\n  removeTodo,\n  toggleTodo,\n} from '../../../state/modules/todos';\nimport { AddItem } from '../AddItem/AddItem';\n\nimport './Todos.styles.scss';\n\nexport const Todos = () => {\n  const { listId } = useParams();\n  const todosSelector = useMemo(makeTodosSelector, []);\n\n  const dispatch = useDispatch();\n\n  const todos = useSelector((state) => todosSelector(state, listId));\n\n  return (\n    <Segment vertical>\n      {todos.length ? (\n        <Menu secondary vertical fluid>\n          {todos.map(({ id, text, completed }) => (\n            <Menu.Item\n              key={id}\n              className={cx('m-todo-item', 'f-row', 'f-items-center', {\n                completed,\n              })}\n            >\n              <Checkbox\n                checked={completed}\n                onChange={() => dispatch(toggleTodo(id))}\n                label={text}\n                className=\"flex\"\n              />\n\n              <Button\n                icon\n                onClick={() => {\n                  dispatch(removeTodo(id));\n                }}\n              >\n                <Icon name=\"trash\" />\n              </Button>\n            </Menu.Item>\n          ))}\n        </Menu>\n      ) : (\n        <Header className=\"f-row\" textAlign=\"center\">\n          Add some todos to this list!\n        </Header>\n      )}\n\n      <AddItem\n        placeholder=\"Enter Todo text...\"\n        onAdd={(text) => dispatch(addTodo(text, listId))}\n      />\n    </Segment>\n  );\n};\n","import * as types from './types';\n\nexport const addTodo = (text, listId) => ({\n  type: types.ADD_TODO,\n  text,\n  listId,\n});\n\nexport const toggleTodo = (id) => ({\n  type: types.TOGGLE_TODO,\n  id,\n});\n\nexport const removeTodo = (id) => ({\n  type: types.REMOVE_TODO,\n  id,\n});\n","import React from 'react';\nimport { Sidebar, Segment, Header, Icon } from 'semantic-ui-react';\n\nimport Lists from '../components/Lists';\n\nimport '../styles/l-lists.scss';\nimport Todos from '../components/Todos';\n\nexport const ListsPage = ({\n  match: {\n    params: { listId },\n  },\n}) => {\n  return (\n    <div className=\"l-lists flex f-column\">\n      <Sidebar.Pushable>\n        <Sidebar\n          width=\"wide\"\n          className=\"m-sidebar\"\n          visible\n          animation=\"slide along\"\n        >\n          <Segment vertical className=\"head\">\n            <Header>\n              <Icon name=\"list alternate\" />\n              My lists\n            </Header>\n          </Segment>\n\n          <Segment vertical>\n            <Lists />\n          </Segment>\n        </Sidebar>\n\n        <Sidebar.Pusher className=\"f-column\">\n          <div className=\"l-todos flex f-column\">\n            <Sidebar.Pushable className=\"flex\">\n              <Sidebar\n                visible={!!listId}\n                width=\"very wide\"\n                className=\"m-sidebar\"\n                animation=\"slide along\"\n              >\n                <Segment vertical className=\"head\">\n                  <Header>\n                    <Icon name=\"check\" />\n                    Todos\n                  </Header>\n                </Segment>\n\n                <Segment vertical>\n                  <Todos />\n                </Segment>\n              </Sidebar>\n            </Sidebar.Pushable>\n          </div>\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Container, Icon, Header, Segment } from 'semantic-ui-react';\n\nexport const NotFound = () => {\n  return (\n    <Container fluid>\n      <Segment textAlign=\"center\" vertical>\n        <Icon size=\"massive\" name=\"settings\" />\n        <Header as=\"h1\">404</Header>\n        <Header as=\"h3\">Not found</Header>\n      </Segment>\n    </Container>\n  );\n};\n","import React from 'react';\nimport { Formik, Field } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Icon, Form } from 'semantic-ui-react';\nimport { v4 } from 'uuid';\n\nimport { InputField } from '../../UI/form/InputField';\n\nimport { addList } from '../../../state/modules/lists';\n\nimport './CreateList.styles.scss';\n\nexport const CreateList = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        listName: '',\n      }}\n      onSubmit={({ listName }) => {\n        const id = v4();\n\n        dispatch(addList(id, listName));\n\n        history.push(`/lists/${id}`);\n      }}\n    >\n      {({ handleSubmit }) => (\n        <Form onSubmit={handleSubmit} className=\"m-create-list\">\n          <Field\n            name=\"listName\"\n            placeholder=\"Type your first list!\"\n            component={InputField}\n          />\n\n          <Button type=\"submit\" icon color=\"blue\">\n            <Icon name=\"check\" />\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import React from 'react';\nimport { Segment, Header, Transition } from 'semantic-ui-react';\n\nimport CreateList from '../components/CreateList';\n\nimport '../styles/l-create-first-list.scss';\n\nexport const CreateFirstList = () => {\n  return (\n    <div className=\"l-create-first-list\">\n      <Segment vertical textAlign=\"center\">\n        <Transition animation=\"fade up\" transitionOnMount duration={2000}>\n          <Header inverted size=\"huge\">\n            You have no lists yet\n          </Header>\n        </Transition>\n\n        <Transition animation=\"fade up\" transitionOnMount duration={3000}>\n          <Header inverted size=\"huge\">\n            Create your first list\n          </Header>\n        </Transition>\n\n        <CreateList />\n      </Segment>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Default from './default';\nimport { ListsPage } from './lists';\nimport { NotFound } from './404';\nimport { CreateFirstList } from './create-first-list';\n\nconst Router = () => (\n  <Switch>\n    <Route exact path=\"/\" component={Default} />\n\n    <Route path=\"/create-first-list\" component={CreateFirstList} />\n    <Route exact path=\"/lists\" component={ListsPage} />\n    <Route exact path=\"/lists/:listId\" component={ListsPage} />\n\n    <Route path=\"*\" component={NotFound} />\n  </Switch>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport configureStore from './state/store';\nimport Routes from './views/routes';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.scss';\n\nconst { store, persistor } = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor} loading={null}>\n      <BrowserRouter>\n        <Routes />\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}